{"version":3,"sources":["BooksAPI.js","ListBooks.js","SearchBook.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","ListBooks","state","selectedOption","shelfs","updateshelf","_this","setState","_this2","this","BooksAPI","booksInShelfs","prevProps","prevState","snapshot","_this3","console","log","_this4","currentlyReading","filter","wantToRead","read","react_default","a","createElement","className","map","key","style","width","height","backgroundImage","imageLinks","smallThumbnail","onChange","event","target","value","disabled","title","authors","react_router_dom","to","Component","SearchBook","query","results","infotobeloaded","updateQuery","clearQuery","error","_this$state","filteredResults","type","placeholder","length","result","BooksApp","react_router","exact","path","render","src_ListBooks","_ref","history","src_SearchBook","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e0732c48.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\n//import PropTypes from 'prop-types'\nimport * as BooksAPI from './BooksAPI'\nimport { Link } from 'react-router-dom'\n\nclass ListBooks extends Component {\n  state = {\n    selectedOption: '',\n    shelfs: [],\n    book: {}\n  }\n  componentDidMount() {\n    BooksAPI.getAll()\n      .then((booksInShelfs) => {\n        // console.log(booksInShelfs)\n        this.setState(() => ({\n          shelfs: booksInShelfs\n        }))\n      })\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n\n    if (this.state.selectedOption !== prevState.selectedOption) {\n      //console.log(this.state.selectedOption)\n      //console.log(this.state.book)\n      BooksAPI.update(this.state.book, this.state.selectedOption)\n        .then(() => {\n          //console.log(shel)\n          console.log('updated')\n          BooksAPI.getAll()\n            .then((booksInShelfs) => {\n              console.log(booksInShelfs)\n              this.setState(() => ({\n                shelfs: booksInShelfs\n              }))\n            })\n        })\n    }\n  }\n\n\n  updateshelf = (selectedOption, book) => {\n    //console.log(selectedOption)\n    this.setState(() => ({\n      selectedOption: selectedOption,\n      book: book\n    }))\n  }\n\n  render() {\n    const { shelfs } = this.state\n    //  console.log(shelfs)\n    // console.log(this.state.currentlyReading)\n\n    const currentlyReading = shelfs.filter((book) => {\n      return book.shelf === \"currentlyReading\"\n    })\n    const wantToRead = shelfs.filter((book) => {\n      return book.shelf === \"wantToRead\"\n    })\n    const read = shelfs.filter((book) => {\n      return book.shelf === \"read\"\n    })\n    //console.log(currentlyReading,wantToRead,read)\n\n    return (\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n          <div>\n            <div className=\"bookshelf\">\n              <h2 className=\"bookshelf-title\">Currently Reading</h2>\n              <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                  {currentlyReading.map((book) => (\n                    <li key={book.id} className='book-list-item'>\n                      <div className=\"book\">\n                        <div className=\"book-top\">\n                          <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: 'url(' + book.imageLinks.smallThumbnail + ')' }}></div>\n                          <div className=\"book-shelf-changer\">\n                            <select\n                              onChange={(event) => this.updateshelf(event.target.value, book)} value={'currentlyReading'}>\n                              <option value=\"move\" disabled>Move to...</option>\n                              <option value=\"currentlyReading\" >Currently Reading</option>\n                              <option value=\"wantToRead\">Want to Read</option>\n                              <option value=\"read\">Read</option>\n                              <option value=\"none\">None</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div className=\"book-title\">{book.title}</div>\n                        <div className=\"book-authors\">{book.authors}</div>\n                      </div>\n                    </li>\n\n                  ))}\n                </ol>\n              </div>\n            </div>\n            <div className=\"bookshelf\">\n              <h2 className=\"bookshelf-title\">Want to Read</h2>\n              <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                  {wantToRead.map((book) => (\n                    <li key={book.id} className='book-list-item'>\n                      <div className=\"book\">\n                        <div className=\"book-top\">\n                          <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: 'url(' + book.imageLinks.smallThumbnail + ')' }}></div>\n                          <div className=\"book-shelf-changer\">\n                            <select\n                              onChange={(event) => this.updateshelf(event.target.value, book)} value={'wantToRead'}>\n                              <option value=\"move\" disabled>Move to...</option>\n                              <option value=\"currentlyReading\">Currently Reading</option>\n                              <option value=\"wantToRead\" >Want to Read</option>\n                              <option value=\"read\">Read</option>\n                              <option value=\"none\">None</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div className=\"book-title\">{book.title}</div>\n                        <div className=\"book-authors\">{book.authors}</div>\n                      </div>\n                    </li>\n                  ))}\n                </ol>\n              </div>\n            </div>\n            <div className=\"bookshelf\">\n              <h2 className=\"bookshelf-title\">Read</h2>\n              <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                  {read.map((book) => (\n                    <li key={book.id} className='book-list-item'>\n                      <div className=\"book\">\n                        <div className=\"book-top\">\n                          <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: 'url(' + book.imageLinks.smallThumbnail + ')' }}></div>\n                          <div className=\"book-shelf-changer\">\n                            <select\n                              onChange={(event) => this.updateshelf(event.target.value, book)} value={'read'}>\n                              <option value=\"move\" disabled>Move to...</option>\n                              <option value=\"currentlyReading\">Currently Reading</option>\n                              <option value=\"wantToRead\">Want to Read</option>\n                              <option value=\"read\">Read</option>\n                              <option value=\"none\">None</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div className=\"book-title\">{book.title}</div>\n                        <div className=\"book-authors\">{book.authors}</div>\n                      </div>\n                    </li>\n                  ))}\n                </ol>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"open-search\">\n          <Link\n            to='/search'\n            className='search-book'>\n            Add\n                    </Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ListBooks","import React, { Component } from 'react'\n//import PropTypes from 'prop-types'\nimport * as BooksAPI from './BooksAPI'\nimport { Link } from 'react-router-dom'\n//import serializeForm from 'form-serialize'\n\n\nclass SearchBook extends Component {\n\n    state = {\n        query: '',\n        results: [],\n        infotobeloaded: '',\n        selectedOption:'',\n        book:{}\n    }\n    // function for updating \n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.query !== prevState.query) {\n            //console.log(prevState.query)\n            //console.log(this.state.query)\n            if (this.state.query === '') {\n                //  console.log('empty input')\n                //this.setState({results:[ ],infotobeloaded:'    '})\n                // console.log(this.state.results)\n                this.setState(() => ({\n                    results: [],\n                    infotobeloaded: '  '\n                }))\n            } else {\n                try {\n                    BooksAPI.search(this.state.query)\n                        .then((results) => {\n                            // console.log(results)\n                            if (!(results.error === \"empty query\")) {\n                                console.log(\"hola\")\n                                this.setState(() => ({\n                                    results\n                                }))\n                            } else {\n                                this.setState(() => ({\n                                    results: [],\n                                    infotobeloaded: 'no book matchs your search'\n                                }))\n                            }\n\n\n                        })\n                } catch (error) {\n                    console.log(error);\n                }\n            }\n        }\n        if (this.state.selectedOption !== prevState.selectedOption) {\n            console.log(this.state.selectedOption)\n            console.log(this.state.book)\n            BooksAPI.update(this.state.book, this.state.selectedOption)\n              .then(() => {\n                //console.log(shel)\n                console.log('updated')\n              })\n          }\n    }\n    updateshelf = (selectedOption, book) => {\n        console.log(selectedOption)\n        this.setState(() => ({\n            selectedOption: selectedOption,\n            book: book\n        }))\n    }\n\n    updateQuery = (query) => {\n        this.setState(() => ({\n            query: query\n        }))\n    }\n    clearQuery = () => {\n        this.updateQuery('')\n    }\n\n    render() {\n        const { query, results, infotobeloaded } = this.state\n        console.log(results)\n        // console.log(query)\n        //  console.log(infotobeloaded)\n\n        const filteredResults = results.filter((book) => {\n            return book.imageLinks != null && book.authors != null;\n        })\n        // console.log(filteredResults)\n\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link\n                        to='/'\n                        className='close-search'\n                    >\n                        close\n                    </Link>\n\n                    <div className=\"search-books-input-wrapper\">\n                        {/*\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                  You can find these search terms here:\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                  you don't find a specific author or title. Every search is limited by search terms.\n                */}\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search by title or author\"\n                            className='search-books'\n                            value={query}\n                            onChange={(event) => this.updateQuery(event.target.value)}\n                        />\n\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    {filteredResults.length === 0 ?\n                        (\n                            <ol className=\"books-grid\">\n                                {infotobeloaded}\n                            </ol>\n                        ) :\n                        (\n                            <ol className=\"books-grid\">\n                                {filteredResults.map((result) => (\n                                    <li key={result.id} className='result-list-item'>\n                                        <div className=\"book\">\n                                            <div className=\"book-top\">\n                                                <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: 'url(' + result.imageLinks.smallThumbnail + ')' }}></div>\n                                                <div className=\"book-shelf-changer\">\n                                                    <select\n                                                        onChange={(event) => this.updateshelf(event.target.value, result)} value ={'none'}>\n                                                        <option value=\"move\" disabled>Move to...</option>\n                                                        <option value=\"currentlyReading\">Currently Reading</option>\n                                                        <option value=\"wantToRead\">Want to Read</option>\n                                                        <option value=\"read\">Read</option>\n                                                        <option value=\"none\">None</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                            <div className=\"book-title\">{result.title}</div>\n                                            <div className=\"book-authors\">{result.authors}</div>\n                                        </div>\n                                    </li>\n                                ))}\n                            </ol>\n                        )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBook","import React from 'react'\n//import * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport ListBooks from './ListBooks'\nimport SearchBook from './SearchBook'\nimport { Route } from 'react-router-dom'\n\nclass BooksApp extends React.Component {\n  state = {\n    books: []\n  }\n  componentDidMount() {\n    /*BooksAPI.search('games')\n      .then((books) => {\n        this.setState(() => ({\n          books\n        }))\n       // console.log(books)\n      })*/\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route exact path='/' render={() => (\n          <ListBooks/>\n        )} />\n        <Route path='/search' render={({ history }) => (\n          <SearchBook\n          />\n        )} />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n    <App />\n</BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}